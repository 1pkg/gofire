package internal

import (
	"fmt"
	"time"

	"github.com/1pkg/gofire/generators"
)

type annotation struct {
	generators.Driver
}

func Annotated(d generators.Driver) generators.Driver {
	return annotation{Driver: d}
}

func (d annotation) Imports() []string {
	return append(d.Driver.Imports(), `"fmt"`, `"os"`, `"os/signal"`)
}

func (d annotation) Template() string {
	return fmt.Sprintf(`
		// THIS IS AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
		// Generated using github.com/1pkg/gofire ðŸ”¥ %s.
	`, time.Now().Format(time.RFC3339)) + d.Driver.Template() + `
		{{ if eq .Package "main" }}
			// auto generated main entrypoint.
			func main() {
				ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)
				defer stop()
				func({{.Return}}){
					if err != nil {
						fmt.Println(err)
						os.Exit(2)
					}
				}({{.Function}}(ctx))
			}
		{{ end }}
	`
}
